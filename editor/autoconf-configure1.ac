####################################################################
#
# configure.ac
#
# The script './configure' is created from this file
# by the autoconf command.
#
####################################################################



####################################################
# init with project name
#
AC_INIT([luced],[0.02])
AC_CONFIG_AUX_DIR([config-aux])
AC_CONFIG_MACRO_DIR([config-m4])

AM_INIT_AUTOMAKE

AM_MAINTAINER_MODE


####################################################
# test for
#

# Checks for programs.
AC_PROG_CC
AC_PROG_CXX
AC_PROG_LIBTOOL
AC_PROG_INSTALL
AC_PROG_LN_S

AC_MSG_CHECKING([for working C++ compiler])
if type "$CXX" >/dev/null 2>&1
then
  AC_MSG_RESULT([yes])
else
  AC_MSG_RESULT([no])
  AC_MSG_FAILURE("Cannot find working C++ compiler.")
fi

AC_ARG_ENABLE(xpm,
              AS_HELP_STRING([--disable-xpm],
                             [disable usage of libXpm for displaying window icons]),
              ,enable_xpm=yes)

AC_ARG_ENABLE(iconv,
              AS_HELP_STRING([--disable-iconv],
                             [disable usage of iconv for transforming character encodings]),
              ,enable_iconv=yes)

AC_ARG_ENABLE(multi-thread,
              AS_HELP_STRING([--enable-multi-thread],
                              [enable multi threading (experimental)]),
              explicit_multi_thread_option_given=yes,
              enable_multi_thread=no)

AC_ARG_ENABLE(debug,
              AS_HELP_STRING([--enable-debug],
                             [enables various runtime checks for debugging purposes]),
              ,enable_debug=no)

AC_ARG_ENABLE(cygwin-fork-workaround,
              AS_HELP_STRING([--disable-cygwin-fork-workaround],
                             [disable workaround for cygwin fork problems under Windows]),
              explicit_cygwin_fork_workaround_option_given=yes,
              enable_cygwin_fork_workaround=yes)

if test x"$explicit_multi_thread_option_given" == x"yes"; then
  if test x"$enable_multi_thread" != x"yes"; then
    if test x"$explicit_cygwin_fork_workaround_option_given" = x"yes"; then
      if test x"$enable_cygwin_fork_workaround" != x"yes"; then
        AC_MSG_FAILURE("option --enable-cygwin-fork-workaround also needs --enable-multi-thread")
      fi
    else
      enable_cygwin_fork_workaround=no
    fi
  fi
else
  enable_multi_thread=no
fi

# Use the C++ compiler for the compile tests
AC_LANG(C++)

AC_CHECK_FUNCS(bcopy memmove strerror)

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(windows.h              \
                 limits.h               \
                 dirent.h               \
                 execinfo.h             \
                 sys/wait.h             \
                 sys/types.h            \
                 sys/stat.h             \
                 ext/hash_map           \
                 tr1/unordered_map      \
                 unordered_map)

AC_SEARCH_LIBS([cos],[m])


AC_CHECK_MEMBER([struct stat.st_mtim.tv_nsec],[AC_DEFINE([HAVE_STAT_MTIME_TV_NSEC],[1],[Define to 1 if struct stat.st_mtim.tv_nsec exists])])
AC_CHECK_MEMBER([struct stat.st_mtimensec],[AC_DEFINE([HAVE_STAT_MTIME_MTIMENSEC],[1],[Define to 1 if struct stat.st_mtimensec exists])])
AC_CHECK_MEMBER([struct stat.st_mtimespec],[AC_DEFINE([HAVE_STAT_MTIME_MTIMESPEC],[1],[Define to 1 if struct stat.st_mtimespec exists])])


AC_CHECK_DECLS([isatty, mkstemp, popen],[],[],[])
AC_CHECK_DECLS([_longjmp],[],[],AC_INCLUDES_DEFAULT [
                                #include <setjmp.h>])

AC_CHECK_DECLS([dlopen],[],[],AC_INCLUDES_DEFAULT [
                              #include <dlfcn.h>])
AC_SEARCH_LIBS([dlopen],[dl])

AC_CHECK_DECLS([NSLinkModule],[],[],AC_INCLUDES_DEFAULT [
                                    #include <mach-o/dyld.h>])


AC_CHECK_DECLS([readline],[],[], AC_INCLUDES_DEFAULT [
                                 #include <readline/readline.h>
                                 #include <readline/history.h>])

luced_LIBS_without_readline="$LIBS"
AC_SEARCH_LIBS([readline],[readline],[have_libreadline=yes],[],[-lcurses])
luced_LIBS_with_readline="$LIBS"
LIBS="$luced_LIBS_without_readline"
AC_SUBST([LIBS_WITH_READLINE],[$luced_LIBS_with_readline])

# x11 
AC_PATH_XTRA
LIBS="$LIBS $X_PRE_LIBS $X_LIBS $X_EXTRA_LIBS"
CFLAGS="$CFLAGS $X_CFLAGS"
CXXFLAGS="$CXXFLAGS $X_CFLAGS"
CPPFLAGS="$CPPFLAGS $X_CFLAGS"

AC_CHECK_HEADERS(X11/X.h       \
                 X11/Xlib.h    \
                 X11/Xatom.h   \
                 X11/keysym.h, \
                [], [AC_MSG_FAILURE("Cannot find working libX11 development headers.")])

AC_CHECK_HEADERS(X11/Xutil.h,   \
                [], [AC_MSG_FAILURE("Cannot find working libX11 development headers.")], \
                [#include <X11/Xlib.h>])

AC_CHECK_HEADERS(X11/XKBlib.h,   \
                [], [], \
                [#include <X11/Xlib.h>])


AC_SEARCH_LIBS([XOpenDisplay],[X11], [], [AC_MSG_FAILURE("Cannot find libX11 library.")])

AC_CHECK_HEADERS(X11/xpm.h, [have_xpm_h=yes])


if test x"$enable_xpm" = x"yes"; then
  if test x"$have_xpm_h" = x"yes"; then
    AC_SEARCH_LIBS([XpmCreatePixmapFromData],[Xpm], [], [AC_MSG_FAILURE("Cannot find libXpm library. You may disable xpm window icon support with the configure option --disable-xpm")])
  else
    AC_MSG_FAILURE("Cannot find libXpm development headers. You may disable xpm window icon support with the configure option --disable-xpm")
  fi
fi

AC_CHECK_HEADERS(windows.h, [have_windows_h=yes])
AC_CHECK_HEADERS(sys/cygwin.h, [have_cygwin_h=yes])
AC_CHECK_HEADERS(pthread.h, [have_pthread_h=yes])

if test x"$enable_multi_thread" = x"yes"; then
  if test x"$have_pthread_h" = x"yes"; then
    AC_SEARCH_LIBS([pthread_create],[pthread], [], [AC_MSG_FAILURE("Cannot find pthread library. You may disable multi threading support with the configure option --disable-multi-thread")])
  else
    AC_MSG_FAILURE("Cannot find pthread development headers. You may disable multi threading support with the configure option --disable-multi-thread")
  fi
fi

############################
# explicit check instead of "AC_SEARCH_LIBS([iconv],[iconv])"
# because under cygwin "iconv" is defined by C preprocessor 
# macro to another symbol for the linker and AC_SEARCH_LIBS
# searches only for the linker symbol
AC_MSG_CHECKING([for linking to lib iconv])
luced_LIBS_without_iconv="$LIBS"
have_iconv=no
for lib in "" "-liconv"; do
  LIBS="$luced_LIBS_without_iconv $lib"
  AC_TRY_LINK([#include <stdlib.h>
               #include <iconv.h>],
      [iconv_t cd = iconv_open("","");
       iconv(cd,NULL,NULL,NULL,NULL);
       iconv_close(cd);],
      have_iconv=yes)
  if test "x$have_iconv" = xyes; then
    break
  fi
done
if test "x$have_iconv" = xyes; then
  AC_MSG_RESULT([yes])
  AC_DEFINE_UNQUOTED([HAVE_ICONV], 1, [Define to 1 for iconv support.])
else
  AC_MSG_RESULT([no])
  AC_DEFINE_UNQUOTED([HAVE_ICONV], 0, [Define to 1 for iconv support.])
fi
############################


if test x"$enable_iconv" = x"yes"; then
  if test x"$have_iconv" != x"yes"; then
    AC_MSG_FAILURE("Cannot get iconv to work. You may disable iconv support for encoding conversion with the configure option --disable-iconv")
  fi
fi

pcre_have_strotolonglong=0
AC_CHECK_FUNCS(strtoq strtoll _strtoi64, [pcre_have_strotolonglong="1"; break])
# If we can't convert a string to a long long, pretend we don't even
# have a long long.
if test $pcre_have_strotolonglong = "0"; then
   pcre_have_long_long="0"
   pcre_have_ulong_long="0"
else
  AC_CHECK_TYPES([long long],
                 [pcre_have_long_long="1"],
                 [pcre_have_long_long="0"])
  AC_CHECK_TYPES([unsigned long long],
                 [pcre_have_ulong_long="1"],
                 [pcre_have_ulong_long="0"])
fi
AC_SUBST(pcre_have_long_long)
AC_SUBST(pcre_have_ulong_long)


AC_CHECK_HEADERS([readline/readline.h], [HAVE_READLINE_H=1])
AC_CHECK_HEADERS([readline/history.h], [HAVE_HISTORY_H=1])
AC_CHECK_LIB([readline], [readline], [HAVE_LIB_READLINE=1])

AC_DEFINE([PCRE_STATIC], [1], [
  Define if linking statically])

# pcre: utf8 handling
AC_DEFINE([SUPPORT_UTF8], [], [
  PCRE: Define to enable support for the UTF-8 Unicode encoding. This will
  work even in an EBCDIC environment, but it is incompatible with
  the EBCDIC macro. That is, PCRE can support *either* EBCDIC code
  *or* ASCII/UTF-8, but not both at once.])

# pcre: unicode properties
AC_DEFINE([SUPPORT_UCP], [], [
  PCRE: Define to enable support for Unicode properties])

ac_pcre_newline_value=10
AC_DEFINE_UNQUOTED([NEWLINE], [$ac_pcre_newline_value], [
  The value of NEWLINE determines the newline character sequence. On
  systems that support it, "configure" can be used to override the
  default, which is 10. The possible values are 10 (LF), 13 (CR),
  3338 (CRLF), -1 (ANY), or -2 (ANYCRLF).])

if test "$enable_bsr_anycrlf" = "yes"; then
  AC_DEFINE([BSR_ANYCRLF], [], [
    By default, the \R escape sequence matches any Unicode line ending
    character or sequence of characters. If BSR_ANYCRLF is defined, this is
    changed so that backslash-R matches only CR, LF, or CRLF. The build-
    time default can be overridden by the user of PCRE at runtime. On
    systems that support it, "configure" can be used to override the
    default.])
fi

with_link_size=4
AC_DEFINE_UNQUOTED([LINK_SIZE], [$with_link_size], [
  The value of LINK_SIZE determines the number of bytes used to store
  links as offsets within the compiled regex. The default is 2, which
  allows for compiled patterns up to 64K long. This covers the vast
  majority of cases. However, PCRE can also be compiled to use 3 or 4
  bytes instead. This allows for longer patterns in extreme cases. On
  systems that support it, "configure" can be used to override this default.])

with_posix_malloc_threshold=10
AC_DEFINE_UNQUOTED([POSIX_MALLOC_THRESHOLD], [$with_posix_malloc_threshold], [
  When calling PCRE via the POSIX interface, additional working storage
  is required for holding the pointers to capturing substrings because
  PCRE requires three integers per substring, whereas the POSIX
  interface provides only two. If the number of expected substrings is
  small, the wrapper function uses space on the stack, because this is
  faster than using malloc() for each call. The threshold above which
  the stack is no longer used is defined by POSIX_MALLOC_THRESHOLD. On
  systems that support it, "configure" can be used to override this
  default.])

with_match_limit=10000000
AC_DEFINE_UNQUOTED([MATCH_LIMIT], [$with_match_limit], [
  The value of MATCH_LIMIT determines the default number of times the
  internal match() function can be called during a single execution of
  pcre_exec(). There is a runtime interface for setting a different
  limit. The limit exists in order to catch runaway regular
  expressions that take for ever to determine that they do not match.
  The default is set very large so that it does not accidentally catch
  legitimate cases. On systems that support it, "configure" can be
  used to override this default default.])

with_match_limit_recursion=MATCH_LIMIT
AC_DEFINE_UNQUOTED([MATCH_LIMIT_RECURSION], [$with_match_limit_recursion], [
  The above limit applies to all calls of match(), whether or not they
  increase the recursion depth. In some environments it is desirable
  to limit the depth of recursive calls of match() more strictly, in
  order to restrict the maximum amount of stack (or heap, if
  NO_RECURSE is defined) that is used. The value of
  MATCH_LIMIT_RECURSION applies only to recursive calls of match(). To
  have any useful effect, it must be less than the value of
  MATCH_LIMIT. The default is to use the same value as MATCH_LIMIT.
  There is a runtime method for setting a different limit. On systems
  that support it, "configure" can be used to override the default.])

AC_DEFINE([MAX_NAME_SIZE], [32], [
  This limit is parameterized just in case anybody ever wants to
  change it. Care must be taken if it is increased, because it guards
  against integer overflow caused by enormously large patterns.])

AC_DEFINE([MAX_NAME_COUNT], [10000], [
  This limit is parameterized just in case anybody ever wants to
  change it. Care must be taken if it is increased, because it guards
  against integer overflow caused by enormously large patterns.])

AH_VERBATIM([PCRE_EXP_DEFN], [
/* If you are compiling for a system other than a Unix-like system or
   Win32, and it needs some magic to be inserted before the definition
   of a function that is exported by the library, define this macro to
   contain the relevant magic. If you do not define this macro, it
   defaults to "extern" for a C compiler and "extern C" for a C++
   compiler on non-Win32 systems. This macro apears at the start of
   every exported function that is part of the external API. It does
   not appear on functions that are "external" in the C sense, but
   which are internal to the library. */
#undef PCRE_EXP_DEFN])


AC_MSG_CHECKING([if iconv uses const pointers])
AC_COMPILE_IFELSE(  [AC_LANG_PROGRAM([[#include <iconv.h>]],
                                     [[
                                       const char *fromPtr=0;
                                       size_t     fromLen=0;
                                       char       *toPtr=0;
                                       size_t     toLen=0;
                                       iconv_t    cv=0;
                                       iconv(cv, &fromPtr, &fromLen, &toPtr, &toLen);
                                      ]])],
                    [
                      AC_MSG_RESULT([yes])
                      AC_DEFINE_UNQUOTED([ICONV_USES_CONST_POINTER], 1, [Define to 1 if you have to use const char* with iconv, to 0 if you must use char*.])
                    ],
                    [
                      AC_MSG_RESULT([no])
                      AC_DEFINE_UNQUOTED([ICONV_USES_CONST_POINTER], 0, [Define to 1 if you have to use const char* with iconv, to 0 if you must use char*.])
                    ]
                 )

AC_MSG_CHECKING([if <ext/hash_map> defines hash_map in namespace std])
AC_COMPILE_IFELSE(  [AC_LANG_PROGRAM([[#include <ext/hash_map>]],
                                     [[
                                       std::hash_map<int,int> m;
                                     ]])],
                    [
                      AC_MSG_RESULT([yes])
                      AC_DEFINE_UNQUOTED([HASH_MAP_UNDER_STD], 1, [Define to 1 if ext/hash_map defines hash_map in namespace std.])
                    ],
                    [
                      AC_MSG_RESULT([no])
                      AC_DEFINE_UNQUOTED([HASH_MAP_UNDER_STD], 0, [Define to 1 if ext/hash_map defines hash_map in namespace std.])
                    ]
                 )
AC_MSG_CHECKING([if <ext/hash_map> defines hash_map in namespace __gnu_cxx])
AC_COMPILE_IFELSE(  [AC_LANG_PROGRAM([[#include <ext/hash_map>]],
                                     [[
                                       __gnu_cxx::hash_map<int,int> m;
                                     ]])],
                    [
                      AC_MSG_RESULT([yes])
                      AC_DEFINE_UNQUOTED([HASH_MAP_UNDER_GNU_CXX], 1, [Define to 1 if ext/hash_map defines hash_map in namespace __gnu_cxx.])
                    ],
                    [
                      AC_MSG_RESULT([no])
                      AC_DEFINE_UNQUOTED([HASH_MAP_UNDER_GNU_CXX], 0, [Define to 1 if ext/hash_map defines hash_map in namespace __gnu_cxx.])
                    ]
                 )
AC_MSG_CHECKING([if <tr1/unordered_map> defines unordered_map in namespace tr1])
AC_COMPILE_IFELSE(  [AC_LANG_PROGRAM([[#include <tr1/unordered_map>]],
                                     [[
                                       std::tr1::unordered_map<int,int> m;
                                     ]])],
                    [
                      AC_MSG_RESULT([yes])
                      AC_DEFINE_UNQUOTED([UNORDERED_MAP_UNDER_STD_TR1], 1, [Define to 1 if tr1/unordered_map defines unordered_map in namespace tr1.])
                    ],
                    [
                      AC_MSG_RESULT([no])
                      AC_DEFINE_UNQUOTED([UNORDERED_MAP_UNDER_STD_TR1], 0, [Define to 1 if tr1/unordered_map defines unordered_map in namespace tr1.])
                    ]
                 )
AC_MSG_CHECKING([if <tr1/unordered_map> is working])
AC_COMPILE_IFELSE(  [AC_LANG_PROGRAM([[#include <tr1/unordered_map>]],
                                     [[
                                       const std::tr1::unordered_map<int,int> m;
                                       std::tr1::unordered_map<int,int>::const_iterator i = m.find(0);
                                     ]])],
                    [
                      AC_MSG_RESULT([yes])
                      AC_DEFINE_UNQUOTED([UNORDERED_MAP_UNDER_TR1_IS_BROKEN], 0, [Define to 1 if tr1/unordered_map is broken.])
                    ],
                    [
                      AC_MSG_RESULT([no])
                      AC_DEFINE_UNQUOTED([UNORDERED_MAP_UNDER_TR1_IS_BROKEN], 1, [Define to 1 if tr1/unordered_map is broken.])
                    ]
                 )
AC_MSG_CHECKING([if <unordered_map> defines unordered_map in namespace std])
AC_COMPILE_IFELSE(  [AC_LANG_PROGRAM([[#include <unordered_map>]],
                                     [[
                                       std::unordered_map<int,int> m;
                                     ]])],
                    [
                      AC_MSG_RESULT([yes])
                      AC_DEFINE_UNQUOTED([UNORDERED_MAP_UNDER_STD], 1, [Define to 1 if unordered_map defines unordered_map in namespace std.])
                    ],
                    [
                      AC_MSG_RESULT([no])
                      AC_DEFINE_UNQUOTED([UNORDERED_MAP_UNDER_STD], 0, [Define to 1 if unordered_map defines unordered_map in namespace std.])
                    ]
                 )

if test x"$have_libreadline" = x"yes"
then
  AC_DEFINE_UNQUOTED([DISABLE_LIB_READLINE], 0, [Define to 1 if libreadline should not be used.])
else
  AC_DEFINE_UNQUOTED([DISABLE_LIB_READLINE], 1, [Define to 1 if libreadline should not be used.])
fi

if test x"$enable_xpm" = x"yes"
then
  AC_DEFINE_UNQUOTED([DISABLE_XPM], 0, [Define to 1 if libXpm should not be used.])
else
  AC_DEFINE_UNQUOTED([DISABLE_XPM], 1, [Define to 1 if libXpm should not be used.])
fi

if test x"$enable_iconv" = x"yes"
then
  AC_DEFINE_UNQUOTED([DISABLE_ICONV], 0, [Define to 1 if iconv should not be used.])
else
  AC_DEFINE_UNQUOTED([DISABLE_ICONV], 1, [Define to 1 if iconv should not be used.])
fi

if test x"$enable_multi_thread" = x"yes"
then
  AC_DEFINE_UNQUOTED([DISABLE_MULTI_THREAD], 0, [Define to 1 if multi threading should not be used.])
else
  AC_DEFINE_UNQUOTED([DISABLE_MULTI_THREAD], 1, [Define to 1 if multi threading should not be used.])
fi

if test "x$enable_debug" = "xyes"
then
  AC_DEFINE_UNQUOTED([ENABLE_DEBUG], 1, [Define to 1 if debug runtime checks should be enabled.])
else
  AC_DEFINE_UNQUOTED([ENABLE_DEBUG], 0, [Define to 1 if debug runtime checks should be enabled.])
fi

if test x"$enable_cygwin_fork_workaround" = x"yes"
then
  AC_DEFINE_UNQUOTED([DISABLE_CYGWIN_FORK_WORKAROUND], 0, [Define to 1 if workaround for cygwin fork should not be used.])
else
  AC_DEFINE_UNQUOTED([DISABLE_CYGWIN_FORK_WORKAROUND], 1, [Define to 1 if workaround for cygwin fork should not be used.])
fi


# last part is concatenated from other files !!!
